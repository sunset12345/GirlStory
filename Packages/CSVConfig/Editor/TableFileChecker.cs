using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace GSDev.CSVConfig.Editor
{
    internal class TableRowData
    {
        public string[] Data;
        public int LineCount;
    }

    internal class TableFileChecker : IFileChecker
    {
        private string[] _title;
        private readonly List<TableRowData> _data = new List<TableRowData>();
        private readonly TableRuleChecker _rule;
        private string _file;
        private readonly ILogger _logger;
        
        public TableFileChecker(ILogger logger)
        {
            _logger = logger;
            _rule = new TableRuleChecker(logger);
        }
        public bool OpenSheet(string file)
        {
            try
            {
                var fileStream = new FileStream(file, FileMode.Open, FileAccess.Read, FileShare.ReadWrite );
                fileStream.Seek(0, SeekOrigin.Begin);
                var data = new byte[fileStream.Length];
                fileStream.Read(data, 0, data.Length);
                fileStream.Close();
                _file = file;
                return Read(data);
            }
            catch (IOException e)
            {
                _logger.LogError(e.ToString());
                return false;
            }
        }

        public void GenerateReader(string outputPath)
        {
            var className = System.IO.Path.GetFileNameWithoutExtension(_file);
            var configClassName = $"{className}Table";
            var fullName = Path.Combine(outputPath, $"{className}Table.cs");

            var fs = new FileStream(fullName, FileMode.Create);

            var content = new StringBuilder("");

            content.Append(@"//-----------------------------------------
//<auto-generated>
//    This code was generated by a tool.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//</auto-generated>
//------------------------------------------");
            content.Append(@"
// Generated from :").Append(className).Append(".csv");

            content.Append(@"

using System.Collections.Generic;
using System.IO;
using System.Text;");

            content.Append(@"

public partial class ").Append(className).Append(@"
{");
            foreach (var s in _title)
            {
                var l = _rule.GetChecker(s);
                string vv;
                foreach (var c in l)
                {
                    vv = c.GenerateRowData(s);
                    if (vv.Length != 0)
                    {
                        content.Append(vv);
                        break;
                    }
                }
            }

            content.Append(@"
}");
            // end of RowData

            content.Append(@"

public class ").Append($"{configClassName} : GSDev.CSVConfig.ConfigBase").Append(@"
{
    static string __config_file_name = ").Append("\"").Append(className).Append("\";");
            content.Append(@"
    public static string ConfigName => __config_file_name;");
            content.Append(@"
    static int __col_count = ").Append( _title.Length.ToString() ).Append(";");

            var uniqueType = _rule.GetFieldType(_rule.UniqueFiledName);
            content.Append(@"

    private readonly Dictionary<").Append(uniqueType).Append(",");
            content.Append(className).Append(@"> __rows = new Dictionary<").Append(uniqueType);
            content.Append(",").Append(className).Append(@">();
    public Dictionary<").Append(uniqueType).Append(",");
            content.Append(className).Append(@"> Rows => __rows;");

            if( _rule.SecondaryFiledName.Length != 0 )
            {
                var secondaryType = _rule.GetFieldType( _rule.SecondaryFiledName );
                var keyfiled = "__Key" + _rule.SecondaryFiledName;
                content.Append(@"

    public Dictionary<").Append( secondaryType ).Append(",List<");
                content.Append(className).Append(">> ").Append( keyfiled ).Append(@" = new Dictionary<").Append(secondaryType);
                content.Append(",List<").Append(className).Append(">>();");

                content.Append(@"

    public List<").Append(className).Append(@"> GetRowDataBy").Append(_rule.SecondaryFiledName).Append("( ").Append(secondaryType).Append(" key )");
                content.Append(@"
    {
        ").Append("List<").Append(className).Append(@"> tmp;
        if( ").Append( keyfiled ).Append(@".TryGetValue( key, out tmp ))    
            return tmp;
        return null;
    }");
            }

            if (_rule.ThirdFiledName.Length != 0)
            {
                var thirdType = _rule.GetFieldType(_rule.ThirdFiledName);
                var keyfiled = "__Key" + _rule.ThirdFiledName;
                content.Append(@"

    public Dictionary<").Append(thirdType).Append(",List<");
                content.Append(className).Append(">> ").Append(keyfiled).Append(@" = new Dictionary<").Append(thirdType);
                content.Append(",List<").Append(className).Append(">>();");

                content.Append(@"

    public List<").Append(className).Append(@"> GetRowDataBy").Append(_rule.ThirdFiledName).Append("( ").Append(thirdType).Append(" key )");
                content.Append(@"
    {
        ").Append("List<").Append(className).Append(@"> tmp;
        if( ").Append(keyfiled).Append(@".TryGetValue( key, out tmp ))    
            return tmp;
        return null;
    }");
            }

            content.Append(@"
    // key = ").Append(className).Append(".").Append( _rule.UniqueFiledName );
            content.Append(@"
    public ").Append(className).Append(@" GetRowData( ").Append(uniqueType).Append(" key )");
            content.Append(@"
    {
        ").Append(className).Append(@" tmp; 
        if( !__rows.TryGetValue( key, out tmp ) )
            LogError(").Append("\"Can't get row data by key:{0} Config:{1}\"").Append(@", key, __config_file_name);
        return tmp;
    }");
            content.Append(@"

    public int GetRowCount()");
            content.Append(@"
    {
        return __rows.Count;
    }");
            content.Append(@"

    public override void ParseConfigure( string text )
    {");
            content.Append(@"

        __rows.Clear();
        ");
            content.Append("string splace_text = text.Replace(\"\\r\",\"\");");
            content.Append(@"
        ");
        
            content.Append("string[] lines = splace_text.Split(new string[]{\"\\n\"}, System.StringSplitOptions.None);");

            content.Append(@"
        
        foreach( string line in lines )
        {
            if( line.Length == 0 )
                continue;
            if( line[0] == '\0' ||").AppendFormat("line[0] == '{0}' || line[0] == '{1}' || line[0] == '{2}')", FlagChar.CommonHeader, FlagChar.TitleHeader, FlagChar.PropertyHeader)
                .Append(@"
                continue;

");
            content.Append(@"
            ");
            content.Append("string[] rowdata = line.Split(new string[]{\",\"}, System.StringSplitOptions.None);");

            content.Append(@"
            if( rowdata.Length != __col_count )
            {");
            content.Append(@"
                LogError(string.Format(").Append("\"{0}列数与原配置不符\", __config_file_name").Append("));");
            content.Append(@"
                return;
            }");
            content.Append(@"
            int counter = 0;
            ").Append(className).Append(" tmp = new ").Append(className).Append("();");
            
            foreach( var ikey in _title )
            {
                var lcer = _rule.GetChecker(ikey);
               
                foreach( var c in lcer )
                {
                    var t = c.GenerateDesc(ikey, "rowdata[counter++]", "tmp");
                    if( t.Length != 0 )
                    {
                        content.Append( t );
                    }
                }
            }
            content.Append(@"
            __rows.Add( tmp.").Append(_rule.UniqueFiledName).Append(", tmp );");

            content.Append(@"
        }");

            if( _rule.SecondaryFiledName.Length != 0 )
            {
                var keyfiled = "__Key" + _rule.SecondaryFiledName;
                content.Append(@"
            
        foreach( ").Append(className).Append(" row in __rows.Values)");
                content.Append(@"
        {
            ").Append("List<").Append(className).Append("> tmp;");
                content.Append(@"
                
            ").Append("tmp = GetRowDataBy").Append(_rule.SecondaryFiledName).Append("(row.").Append(_rule.SecondaryFiledName).Append(");");

                content.Append(@"
            if( null == tmp )
            {
                ").Append("tmp = new List<").Append(className).Append(">();");

                content.Append(@"
                tmp.Add(row);");
                content.Append(@"
                ").Append(keyfiled).Append(".Add( ").Append("row.").Append(_rule.SecondaryFiledName).Append(",tmp );");

                content.Append(@"
            }
            else
            {
                ").Append("tmp.Add(row);");

                content.Append(@"
            }");
                content.Append(@"
        }");
            }

            if (_rule.ThirdFiledName.Length != 0)
            {
                var keyfiled = "__Key" + _rule.ThirdFiledName;
                content.Append(@"
            
        foreach( ").Append(className).Append(" row in __rows.Values)");
                content.Append(@"
        {
            ").Append("List<").Append(className).Append("> tmp;");
                content.Append(@"
                
            ").Append("tmp = GetRowDataBy").Append(_rule.ThirdFiledName).Append("(row.").Append(_rule.ThirdFiledName).Append(");");

                content.Append(@"
            if( null == tmp )
            {
                ").Append("tmp = new List<").Append(className).Append(">();");

                content.Append(@"
                tmp.Add(row);");
                content.Append(@"
                ").Append(keyfiled).Append(".Add( ").Append("row.").Append(_rule.ThirdFiledName).Append(",tmp );");

                content.Append(@"
            }
            else
            {
                ").Append("tmp.Add(row);");

                content.Append(@"
            }");
                content.Append(@"
        }");
            }
            content.Append(@"
    }
}");
            var cache = System.Text.Encoding.UTF8.GetBytes( content.ToString() );
            fs.Write( cache , 0, cache.Length);
            fs.Close();

        }
        private bool Read(byte[] fileData)
        {
            string desc;
            byte[] bom = { fileData[0], fileData[1], fileData[2] };
            if (bom[0] == 239 && bom[1] == 187 && bom[2] == 191)
                desc = System.Text.UTF8Encoding.UTF8.GetString(fileData, 3, fileData.Length - 3);
            else
                desc = System.Text.UTF8Encoding.UTF8.GetString(fileData);
            desc = desc.Replace("\r", "");
            var lines = desc.Split(new [] { "\n" }, System.StringSplitOptions.None);

            var lineCount = 0;
            foreach (var line in lines)
            {
                ++lineCount;

                if (line.Length == 0)
                    continue;

                var front = line[0];
                if (front == '\0' || front == FlagChar.CommonHeader)
                    continue;

                if (front == FlagChar.TitleHeader)
                {
                    var ln = line.Remove(0, 1);
                    ln = ln.Replace(" ", "");
                    _title = ln.Split(FlagChar.FieldSeparator, System.StringSplitOptions.None)
                        .Select(TableFileChecker.NormalizeFieldName).ToArray();
                }
                else if (front == FlagChar.PropertyHeader)
                {
                    var ln = line.Remove(0, 1);
                    var array = ln.Split(FlagChar.FieldSeparator, System.StringSplitOptions.RemoveEmptyEntries);
                    foreach (var tmp in array)
                    {
                        if (!_rule.GenerateRule(tmp, _file, lineCount))
                            return false;
                    }
                }
                else
                {
                    var ln = line.Split(FlagChar.FieldSeparator, System.StringSplitOptions.None);
                    var row = new TableRowData();
                    row.LineCount = lineCount;
                    row.Data = ln;

                    _data.Add(row);
                }
            }
            return true;
        }
        public bool Check()
        {

            try
            {
                if (_rule.UniqueFiledName.Length == 0)
                    throw new System.Exception($"{_file}缺少unique字段类型".ToString());

                if (_data.Count == 0)
                    throw new System.Exception($"{_file}未填写数据".ToString());

                foreach (var r in _data)
                {
                    if (r.Data.Length != _title.Length)
                        throw new System.Exception($"{_file}应有{_title.Length}列,{r.LineCount}行却有{r.Data.Length}列".ToString());

                }

                for (var i = 0; i < _title.Length; ++i)
                {
                    var lc = _rule.GetChecker(_title[i]);
                    if (lc != null)
                    {
                        foreach (var r in _data)
                        {
                            var v = r.Data[i];
                            v = v.Replace(" ", "");
                            foreach (var cc in lc)
                            {
                                cc.Check(v, _file, _title[i], r.LineCount);
                            }
                        }
                    }

                }

            }
            catch (System.Exception e)
            {
                _logger.LogError(e.Message);
                return false;
            }
            return true;
        }

        public static string NormalizeFieldName(string fieldName)
        {
            var words = fieldName.Split('_');
            var name = "";
            foreach (var word in words)
                name = name + word.Substring(0, 1).ToUpper() + word.Substring(1);
            return name;
        }
    }
}
