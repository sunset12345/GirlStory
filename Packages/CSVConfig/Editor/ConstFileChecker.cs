using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace GSDev.CSVConfig.Editor
{
    internal class ConstRowData
    {
        public string Key;
        public string Data;
        public ConstTypeHelper TypeHelper;
        public string Description;
    }

    internal class ConstFileChecker : IFileChecker
    {
        private readonly Dictionary<string, ConstRowData> _data = new Dictionary<string, ConstRowData>();

        private string _file;
        private readonly ILogger _logger;

        public ConstFileChecker(ILogger logger)
        {
            _logger = logger;
        }

        public bool OpenSheet(string file)
        {
            try
            {
                var fileStream = new FileStream(file, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                fileStream.Seek(0, SeekOrigin.Begin);
                var data = new byte[fileStream.Length];
                fileStream.Read(data, 0, data.Length);
                fileStream.Close();
                _file = file;
                return Read(data);
            }
            catch (IOException e)
            {
                _logger.LogError(e.ToString());
                return false;
            }
        }

        private bool Read(byte[] fileData)
        {
            string description;
            byte[] bom = { fileData[0], fileData[1], fileData[2] };
            if (bom[0] == 239 && bom[1] == 187 && bom[2] == 191)
                description = System.Text.UTF8Encoding.UTF8.GetString(fileData, 3, fileData.Length - 3);
            else
                description = System.Text.UTF8Encoding.UTF8.GetString(fileData);
            description = description.Replace("\r", "");
            var lines = description.Split(new[] { "\n" }, System.StringSplitOptions.None);

            foreach (var line in lines)
            {
                if (line.Length == 0)
                    continue;

                var front = line[0];
                if (front == '\0' || front == FlagChar.CommonHeader)
                    continue;

                var dataLine = line.Split(FlagChar.FieldSeparator, System.StringSplitOptions.None);
                if (dataLine.Length < 3)
                    throw new InvalidDataException($"[Const] Invalid data in file:{_file}\nline:{line}");
                var row = new ConstRowData();
                row.Key = dataLine[0];
                row.Data = dataLine[1];
                row.TypeHelper = ConstTypeHelperFactory.CreateHelper(dataLine[2], row.Key);
                if (row.TypeHelper == null)
                    throw new InvalidDataException($"[Const] Unrecognized type in file:{_file}\nline:{line}");
                if (dataLine.Length >= 4 && !string.IsNullOrWhiteSpace(dataLine[3]))
                    row.Description = dataLine[3];
                if (_data.ContainsKey(row.Key))
                    throw new InvalidDataException($"[Const] Duplicated key in file:{_file}\nline:{line}");
                _data.Add(row.Key, row);
            }

            return true;
        }

        public bool Check()
        {
            try
            {
                foreach (var rawData in _data)
                {
                    rawData.Value.TypeHelper.Check(rawData.Value.Data, _file);
                }
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message);
                return false;
            }

            return true;
        }

        public void GenerateReader(string outputPath)
        {
            var className = System.IO.Path.GetFileNameWithoutExtension(_file);
            var fullName = Path.Combine(outputPath, $"{className}.cs");

            var fs = new FileStream(fullName, FileMode.Create);

            var content = new StringBuilder("");

            var sortedData = new List<ConstRowData>(_data.Values);
            sortedData.Sort((a, b) => string.Compare(a.Key, b.Key, StringComparison.InvariantCultureIgnoreCase));

            content.Append(@"//-----------------------------------------
//<auto-generated>
//    This code was generated by a tool.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//</auto-generated>
//------------------------------------------");
            content.Append(@"
// Generated from :").Append(className).Append(".csv");

            content.Append(@"

using System.Collections.Generic;
using System.IO;
using System.Text;");

            // Start of class
            content.Append(@"

public class ").Append($"{className} : GSDev.CSVConfig.ConfigBase").Append(@"
{");
            foreach (var rawData in sortedData)
            {
                if (!string.IsNullOrEmpty(rawData.Description))
                    content.Append($@"
    /// <summary>
    /// {rawData.Description}
    /// </summary>");
                var fieldProperty = rawData.TypeHelper.GenerateProperty();
                content.Append(fieldProperty);
                content.Append("\n");
            }

            // Start of parser
            content.Append(@"

    public override void ParseConfigure( string text )
    {");
            content.Append(@"
        var lines = text.Replace(""\r"", """")
            .Split(new[] {""\n""}, System.StringSplitOptions.None);

        var rawData = new Dictionary<string, string>();
        foreach (var line in lines)
        {
            if( line.Length == 0 )
                continue;
            if( line[0] == '\0' ||line[0] == '#' || line[0] == '%' || line[0] == '$')
                continue;

            var rows = line.Split(new[] {"",""}, System.StringSplitOptions.None);
            if (rows.Length < 3)
            {
                ErrorLogger?.Invoke(string.Format(""CommonConst列数不符""));
                return;
            }
        
            rawData.Add(rows[0], rows[1]);
        }
        
        var raw = """";");

            foreach (var rawData in sortedData)
            {
                var reader = rawData.TypeHelper.GenerateReader();
                content.Append(reader);
            }

            // End of parser
            content.Append(@"
    }");

            // End of class
            content.Append(@"
}");
            var cache = System.Text.Encoding.UTF8.GetBytes(content.ToString());
            fs.Write(cache, 0, cache.Length);
            fs.Close();
        }
    }
}