//-----------------------------------------
//<auto-generated>
//    This code was generated by a tool.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//</auto-generated>
//------------------------------------------
// Generated from :InappConfig.csv

using System.Collections.Generic;
using System.IO;
using System.Text;

public partial class InappConfig
{
    private int __Id;
    public int Id
    {
        internal set{ __Id = value; }
        get{ return __Id; }
    }
    private string __Name;
    public string Name
    {
        internal set{ __Name = value; }
        get{ return __Name; }
    }
    private string __GoogleProductId;
    public string GoogleProductId
    {
        internal set{ __GoogleProductId = value; }
        get{ return __GoogleProductId; }
    }
    private string __AppleProductId;
    public string AppleProductId
    {
        internal set{ __AppleProductId = value; }
        get{ return __AppleProductId; }
    }
    private int __ProductType;
    public int ProductType
    {
        internal set{ __ProductType = value; }
        get{ return __ProductType; }
    }
    private float __UsDollor;
    public float UsDollor
    {
        set{ __UsDollor = value; }
        get{ return __UsDollor; }
    }
    private int __DiamondCount;
    public int DiamondCount
    {
        internal set{ __DiamondCount = value; }
        get{ return __DiamondCount; }
    }
}

public class InappConfigTable : GSDev.CSVConfig.ConfigBase
{
    static string __config_file_name = "InappConfig";
    public static string ConfigName => __config_file_name;
    static int __col_count = 7;

    private readonly Dictionary<int,InappConfig> __rows = new Dictionary<int,InappConfig>();
    public Dictionary<int,InappConfig> Rows => __rows;
    // key = InappConfig.Id
    public InappConfig GetRowData( int key )
    {
        InappConfig tmp; 
        if( !__rows.TryGetValue( key, out tmp ) )
            LogError("Can't get row data by key:{0} Config:{1}", key, __config_file_name);
        return tmp;
    }

    public int GetRowCount()
    {
        return __rows.Count;
    }

    public override void ParseConfigure( string text )
    {

        __rows.Clear();
        string splace_text = text.Replace("\r","");
        string[] lines = splace_text.Split(new string[]{"\n"}, System.StringSplitOptions.None);
        
        foreach( string line in lines )
        {
            if( line.Length == 0 )
                continue;
            if( line[0] == '\0' ||line[0] == '#' || line[0] == '%' || line[0] == '$')
                continue;


            string[] rowdata = line.Split(new string[]{","}, System.StringSplitOptions.None);
            if( rowdata.Length != __col_count )
            {
                LogError(string.Format("{0}列数与原配置不符", __config_file_name));
                return;
            }
            int counter = 0;
            InappConfig tmp = new InappConfig();

            string strId = rowdata[counter++];
            if (!string.IsNullOrEmpty(strId))
                tmp.Id = int.Parse(strId);
            tmp.Name = rowdata[counter++];
            tmp.GoogleProductId = rowdata[counter++];
            tmp.AppleProductId = rowdata[counter++];

            string strProductType = rowdata[counter++];
            if (!string.IsNullOrEmpty(strProductType))
                tmp.ProductType = int.Parse(strProductType);

            string strUsDollor = rowdata[counter++];
            if (!string.IsNullOrEmpty(strUsDollor))
                tmp.UsDollor = float.Parse(strUsDollor, System.Globalization.CultureInfo.InvariantCulture);

            string strDiamondCount = rowdata[counter++];
            if (!string.IsNullOrEmpty(strDiamondCount))
                tmp.DiamondCount = int.Parse(strDiamondCount);
            __rows.Add( tmp.Id, tmp );
        }
    }
}