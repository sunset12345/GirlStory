//-----------------------------------------
//<auto-generated>
//    This code was generated by a tool.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//</auto-generated>
//------------------------------------------
// Generated from :Const.csv

using System.Collections.Generic;
using System.IO;
using System.Text;

public class Const : GSDev.CSVConfig.ConfigBase
{
    /// <summary>
    /// 默认头像
    /// </summary>
    public AssetRef DefaultHead => __DefaultHead;
    private AssetRef __DefaultHead;

    /// <summary>
    /// 默认物品
    /// </summary>
    public Dictionary<int, int> DefaultItem => __DefaultItem;
    private readonly Dictionary<int, int> __DefaultItem = new Dictionary<int, int>();


    public override void ParseConfigure( string text )
    {
        var lines = text.Replace("\r", "")
            .Split(new[] {"\n"}, System.StringSplitOptions.None);

        var rawData = new Dictionary<string, string>();
        foreach (var line in lines)
        {
            if( line.Length == 0 )
                continue;
            if( line[0] == '\0' ||line[0] == '#' || line[0] == '%' || line[0] == '$')
                continue;

            var rows = line.Split(new[] {","}, System.StringSplitOptions.None);
            if (rows.Length < 3)
            {
                ErrorLogger?.Invoke(string.Format("CommonConst列数不符"));
                return;
            }
        
            rawData.Add(rows[0], rows[1]);
        }
        
        var raw = "";
        if (rawData.TryGetValue("DefaultHead", out raw))
        {
            __DefaultHead = AssetRef.Parse(raw);
        }
        if (rawData.TryGetValue("DefaultItem", out raw))
        {
            var keyValues = raw.Split(new string[]{"|"}, System.StringSplitOptions.RemoveEmptyEntries);
            __DefaultItem.Clear();
            foreach (var kv in keyValues)
            {
                if (string.IsNullOrEmpty(kv))
                    continue;
                var split = kv.Split(':');
                if (split.Length != 2)
                    continue;
                var k = int.Parse(split[0]);
                var v = int.Parse(split[1]);
                __DefaultItem.Add(k, v);
            }
        }
    }
}