//-----------------------------------------
//<auto-generated>
//    This code was generated by a tool.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//</auto-generated>
//------------------------------------------
// Generated from :AudioConfig.csv

using System.Collections.Generic;
using System.IO;
using System.Text;

public partial class AudioConfig
{
    private string __Id;
    public string Id
    {
        internal set{ __Id = value; }
        get{ return __Id; }
    }
    private AssetRef __Asset;
    public AssetRef Asset
    {
        internal set{ __Asset = value; }
        get{ return __Asset; }
    }
    private float __Volume;
    public float Volume
    {
        set{ __Volume = value; }
        get{ return __Volume; }
    }
    private float __Interval;
    public float Interval
    {
        set{ __Interval = value; }
        get{ return __Interval; }
    }
    private bool __Load;
    public bool Load
    {
        set{ __Load = value; }
        get{ return __Load; }
    }
    private string __Desc;
    public string Desc
    {
        internal set{ __Desc = value; }
        get{ return __Desc; }
    }
}

public class AudioConfigTable : GSDev.CSVConfig.ConfigBase
{
    static string __config_file_name = "AudioConfig";
    public static string ConfigName => __config_file_name;
    static int __col_count = 6;

    private readonly Dictionary<string,AudioConfig> __rows = new Dictionary<string,AudioConfig>();
    public Dictionary<string,AudioConfig> Rows => __rows;
    // key = AudioConfig.Id
    public AudioConfig GetRowData( string key )
    {
        AudioConfig tmp; 
        if( !__rows.TryGetValue( key, out tmp ) )
            LogError("Can't get row data by key:{0} Config:{1}", key, __config_file_name);
        return tmp;
    }

    public int GetRowCount()
    {
        return __rows.Count;
    }

    public override void ParseConfigure( string text )
    {

        __rows.Clear();
        string splace_text = text.Replace("\r","");
        string[] lines = splace_text.Split(new string[]{"\n"}, System.StringSplitOptions.None);
        
        foreach( string line in lines )
        {
            if( line.Length == 0 )
                continue;
            if( line[0] == '\0' ||line[0] == '#' || line[0] == '%' || line[0] == '$')
                continue;


            string[] rowdata = line.Split(new string[]{","}, System.StringSplitOptions.None);
            if( rowdata.Length != __col_count )
            {
                LogError(string.Format("{0}列数与原配置不符", __config_file_name));
                return;
            }
            int counter = 0;
            AudioConfig tmp = new AudioConfig();
            tmp.Id = rowdata[counter++];
            tmp.Asset = AssetRef.Parse(rowdata[counter++]);

            string strVolume = rowdata[counter++];
            if (!string.IsNullOrEmpty(strVolume))
                tmp.Volume = float.Parse(strVolume, System.Globalization.CultureInfo.InvariantCulture);

            string strInterval = rowdata[counter++];
            if (!string.IsNullOrEmpty(strInterval))
                tmp.Interval = float.Parse(strInterval, System.Globalization.CultureInfo.InvariantCulture);

            string strLoad = rowdata[counter++];
            if (!string.IsNullOrEmpty(strLoad))
                tmp.Load = string.Equals(bool.TrueString, strLoad, System.StringComparison.InvariantCultureIgnoreCase);
            tmp.Desc = rowdata[counter++];
            __rows.Add( tmp.Id, tmp );
        }
    }
}